<?php


namespace Otg\Ean\Tests\Subscriber;

use GuzzleHttp\Command\Command;
use GuzzleHttp\Command\Event\InitEvent;
use Otg\Ean\Subscriber\Authentication;

class AuthenticationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * The sig parameter is a hash of the apiKey, secret and current timestamp
     *
     * @see https://developer.ean.com/md5-hash-generator
     */
    public function testSignature()
    {
        $apiKey = 'cbrzfta369qwyrm9t5b8y8kf';
        $cid  = 55505;
        $secret = 'ui0Pol3W';
        $timestamp = 1429926006;

        $command = new Command('dummy');

        /** @var Authentication|\PHPUnit_Framework_MockObject_MockObject $auth */
        $auth = $this->getMockBuilder('Otg\Ean\Subscriber\Authentication')
            ->setConstructorArgs([$apiKey, $cid, $secret])
            ->setMethods(['getTimestamp'])
            ->getMock();

        $auth
            ->expects($this->atLeastOnce())
            ->method('getTimestamp')
            // return our static timestamp for testing
            ->will($this->returnValue($timestamp));

        /** @var InitEvent|\PHPUnit_Framework_MockObject_MockObject $initEvent */
        $initEvent = $this->getMockBuilder('GuzzleHttp\Command\Event\InitEvent')
            ->disableOriginalConstructor()
            ->getMock();

        $initEvent->expects($this->atLeastOnce())
            ->method('getCommand')
            ->will($this->returnValue($command));

        // call subscriber
        $auth->onInit($initEvent);

        // expected hash generated by https://developer.ean.com/md5-hash-generator
        $this->assertEquals('f14d5e162cd9a7afb726c946d8d8ea38', $command['sig']);

        $this->assertEquals($apiKey, $command['apiKey']);
        $this->assertEquals($cid, $command['cid']);
    }

    /**
     * No sig parameter is added to the Command when the Authentication subscriber is constructed
     * without the optional $secret argument
     *
     * (Without the sig, EAN authenticates the apiKey/cid and originating IP address against a
     *  list of authorised IP addresses)
     */
    public function testIpAuthentication()
    {
        $apiKey = 'cbrzfta369qwyrm9t5b8y8kf';
        $cid  = 55505;
        $command = new Command('dummy');

        $auth = new Authentication($apiKey, $cid);

        /** @var InitEvent $initEvent */
        $initEvent = $this->getMockBuilder('GuzzleHttp\Command\Event\InitEvent')
            ->disableOriginalConstructor()
            ->getMock();

        $initEvent->expects($this->atLeastOnce())
            ->method('getCommand')
            ->will($this->returnValue($command));

        // call subscriber
        $auth->onInit($initEvent);

        $this->assertArrayNotHasKey('sig', $command);

        $this->assertEquals($apiKey, $command['apiKey']);
        $this->assertEquals($cid, $command['cid']);
    }
}
